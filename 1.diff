diff --git a/README.md b/README.md
index 3efe68b..8f4491c 100644
--- a/README.md
+++ b/README.md
@@ -43,7 +43,7 @@ In development. This is my learning process of perl6 and ZMQ. I have a lot to le
     $l2.log( 'another important message');
 
 #### B ( more elaborate )
-    my $logger = Logging::instance('example', 'tcp://78.78.1.7:3301'\
+    my $logger = Logging::instance('example', 'tcp://78.78.1.7:3301')\
                                 , :default-level( :warning )\
                                 , :domain-list( < database engine front-end nativecall > )\
                                 , :format( :json ))\
diff --git a/bin/log-catcher.pl b/bin/log-catcher.pl
index a4a7c03..ae500a6 100755
--- a/bin/log-catcher.pl
+++ b/bin/log-catcher.pl
@@ -2,17 +2,13 @@
 
 use v6;
 
-use lib '/home/docker/workspace/p6-log-zmq/lib';
-#use lib 'lib';
+use lib 'lib';
 
 use Log::ZMQ::LogCatcher;
 
 sub MAIN( Str :$uri, Str :$level = 'info', Str :$prefix = '', Bool :$debug = False,   *@domains  ) {
 
-  my $catcher = $uri.defined 
-                ?? LogCatcher::instance(:$uri, :$debug) 
-                !! LogCatcher::instance( :$debug);
-
+  my $catcher = $uri.defined ?? LogCatcher::instance(:$uri, :$debug) !! LogCatcher::instance( :$debug);
   $catcher.set-level-filter( $level);
   $catcher.set-domains-filter(| @domains) if @domains;
 
diff --git a/lib/Log/ZMQ/Common.pm b/lib/Log/ZMQ/Common.pm
index 6bd1a2b..a4ac85d 100644
--- a/lib/Log/ZMQ/Common.pm
+++ b/lib/Log/ZMQ/Common.pm
@@ -4,12 +4,8 @@ unit module Log::ZMQ::Common;
 
 use v6;
 
-our %PROTOCOL is export = ('prefix' => -4
-                          , 'domain' => -3
-                          , 'level' => -2
-                          , 'format' => -1
-                          , 'content' => 1
-                          , 'timestamp' => 2);
+our %PROTOCOL is export = ('prefix' => -4, 'domain' => -3, 'level' => -2, 'format' => -1
+                , 'content' => 1, 'timestamp' => 2);
 
 our %LEVELS is export = ( :critical(0) :error(1) :warning(2) :info(3) :debug(4) :trace(5) );
 our %ILVELS is export = zip(%LEVELS.values, %LEVELS.keys).flat;
diff --git a/lib/Log/ZMQ/LogCatcher.pm b/lib/Log/ZMQ/LogCatcher.pm
index 4cf6918..ec0b0b1 100644
--- a/lib/Log/ZMQ/LogCatcher.pm
+++ b/lib/Log/ZMQ/LogCatcher.pm
@@ -14,7 +14,7 @@ use Log::ZMQ::Common;
 class LogCatcher {...}
 
 my LogCatcher $instance;
-END { say "ENDING..."; $instance.DESTROY if $instance.defined; say "LogCatcher Out"; }
+END { $instance.DESTROY if $instance.defined }
 
 
 class LogCatcher is export {
@@ -49,10 +49,10 @@ class LogCatcher is export {
     $!ctx.shutdown;
   }
 
-  method !default-zmq-handler($content, $timestamp, $level, $domain) {
+  method !default-zmq-handler($content, $timestamp, $level, $domain, $target) {
     say qq:to/MSG_END/;
     ___________________________________________________________________
-    $level @ $timestamp (domain: $domain)
+    $level @ $timestamp (domain: $domain, target: $target)
     $content
     ___________________________________________________________________
     MSG_END
@@ -81,7 +81,7 @@ class LogCatcher is export {
     return self;
   }
 
-  method add-zmq-handler( &f:(:$content, :$timestamp, :$level, :$domain) ) {
+  method add-zmq-handler( &f:(:$content, :$timestamp, :$level, :$domain, :$target) ) {
       @!zmq-handlers.push(&f);
       return self;
   }
@@ -98,33 +98,34 @@ class LogCatcher is export {
     $begin++ while (($begin < $msg.elems) && ($msg[$begin] ne ''));
 
     if $!debug {
-      say "LogCatcher: DISPATCHING THIS: begin=$begin";
+      say "LogCatcher: DISPATCHING THIS:";
       say "$_) ---"  ~ $msg[$_] ~ "---" for ^$msg.elems;
     }
 
-   {say "begin=$begin" if $!debug;return} if $begin == $msg.elems;
+    return if $begin == $msg.elems;
     my $level = $msg[ $begin  + %PROTOCOL<level> ];
-    {say "level=$level"  if $!debug; return} if %LEVELS{$level} > $!level-max;
+    return if %LEVELS{$level} > $!level-max;
     my $domain = $msg[ $begin + %PROTOCOL<domain> ];
-    {say "DOMAIN $domain is wrong" if $!debug; return} if @!domains > 0 && ! @!domains.grep( { $_ eq $domain } );
+    return if @!domains > 0 && ! @!domains.grep( { $_ eq $domain } );
 
     my $format = $msg[$begin   + %PROTOCOL<format> ];
 
     given $format {
       when  'zmq' {
-        {say "ZMQ: begin=$begin" if $!debug; return} unless $begin + 1 < $msg.elems;
+        return unless $begin + 3 < $msg.elems;
         my $content =  $msg[ $begin + %PROTOCOL<content> ];
         my $timestamp = $msg[ $begin + %PROTOCOL<timestamp> ];
+        my $target  = $msg[ $begin + %PROTOCOL<target> ];
 
         if @!zmq-handlers.elems > 0 {
-          $_(:$content, :$timestamp, :$level, :$domain)
+          $_(:$content, :$timestamp, :$level, :$domain, :$target)
             for @!zmq-handlers;
         } else {
-          self!default-zmq-handler($content, $timestamp, $level, $domain);
+          self!default-zmq-handler($content, $timestamp, $level, $domain, $target);
         }
       }
       default {
-        {say "DEFAULT: begin=$begin" if $!debug;return} unless $begin + 1 < $msg.elems;
+        return unless $begin + 1 < $msg.elems;
         my $content =  $msg[ $begin + %PROTOCOL<content> ];
         if %!handlers{$format}:exists {
           my @handlers = %!handlers{$format};
diff --git a/lib/Log/ZMQ/Logger.pm b/lib/Log/ZMQ/Logger.pm
index cc1960c..2a4b6e3 100644
--- a/lib/Log/ZMQ/Logger.pm
+++ b/lib/Log/ZMQ/Logger.pm
@@ -42,7 +42,7 @@ my %FORMATTERS = %(
 );
 
 my Logging $instance;
-END { $instance.DESTROY if $instance.defined; }
+END { $instance.DESTROY if $instance.defined; say "END" }
 
 class Logging is export {
 
@@ -60,9 +60,7 @@ class Logging is export {
  our proto sub instance(|)  {*}
 
   multi sub instance(Str $prefix, Str $uri = $log-uri
-                        , :$default-level  is copy
-                        , :@domain-list
-                        , :$format is copy)  {
+                        , :$default-level  is copy, :@domain-list, :$format is copy)  {
     die "Logging is already initialized. call instance wit empty argument list"
       if $instance.defined;
 
@@ -101,12 +99,7 @@ class Logging is export {
       my Context $ctx .= new;
       my Socket $socket .= new( $ctx , :publisher );
       $socket.bind( $!uri );
-
-      {
-          say "DEBUG[QUEUR>LIST]: $_"; 
-          .send($socket)
-      } for $!queue.list;
-
+      .send($socket) for $!queue.list;
       $socket.unbind.close;
       $ctx.shutdown;
     }
@@ -169,14 +162,12 @@ class Logger is export {
   }
 
   method log(Str $content, *%h) { #say %h;say self.domains;
-    say "DEBUG[Logger::log]:$content" if $!debug;  
     my $argc =  %h.elems;
     my $err = "you can specifiy a level ({ %LEVELS.keys }) and a domain ({ self.domains.keys })\n ({ %h.keys }) makes no sense";
     die $err unless $argc <= 2;
     my $domain = $!domain;
     my $level = self.default-level;
 
-
     for %h.keys  -> $k {
       if self.domains{$k}:exists {
         $domain = $k;
@@ -213,7 +204,7 @@ class Logger is export {
     $builder = &m(:$builder, :$prefix, :$timestamp
                                             , :$level, :$domain,  :$content );
 
-    say "DEBUG[Logger:log]->SENT $builder" if $!debug;
+    #say "SENT $builder";
     $!queue.send($builder.finalize);
   }
 
